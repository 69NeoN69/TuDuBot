# –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import telebot
import sqlite3
from datetime import datetime, date
from apscheduler.schedulers.background import BackgroundScheduler

TOKEN = ''
bot = telebot.TeleBot(TOKEN)
# —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
user_sessions = {}

scheduler = BackgroundScheduler()
scheduler.start()

start_mes = [
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.'
    ' –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–ª—è —Å–µ–±—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∑–∞–¥–∞—á–∏'
    ' –Ω–∞ –¥–µ–Ω—å, –∞ —Ç–∞–∫–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ!'
]
# —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é
def show_main_menu(chat_id):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='add_task'))
    keyboard.add(telebot.types.InlineKeyboardButton('–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='today_task'))
    keyboard.add(telebot.types.InlineKeyboardButton('–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏', callback_data='write_all'))
    keyboard.add(telebot.types.InlineKeyboardButton('–ö–æ—Ä–∑–∏–Ω–∞', callback_data='trash'))
    bot.send_message(chat_id, '–ú–µ–Ω—é:', reply_markup=keyboard)
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start
@bot.message_handler(commands=['start'])
def handle_command_start(message):
    # —Å–æ–∑–¥–∞–Ω–∏—è SQL —Ç–∞–±–ª–∏—Ü—ã
    con = sqlite3.connect('todo_reminders.db')
    con.execute(f'''
        CREATE TABLE IF NOT EXISTS user_{message.chat.id} (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            task TEXT,
            date TEXT,
            notification INTEGER,
            time TEXT,
            complete INTEGER
        )
    ''')
    con.close()
    bot.send_message(message.chat.id, ' '.join(start_mes))
    show_main_menu(message.chat.id)
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@bot.callback_query_handler(func=lambda callback: True)
def handle_callback(callback):
    con = sqlite3.connect('todo_reminders.db')
    chat_id = callback.message.chat.id
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:
    if callback.data == 'add_task':
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏')
        bot.register_next_step_handler(callback.message, save_task)
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    elif callback.data == 'answer_1':
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú')
        bot.register_next_step_handler(callback.message, save_time)
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    elif callback.data == 'answer_2':
        session = user_sessions.get(chat_id)
        if session:
            con.execute(
                f"INSERT INTO user_{chat_id} (task, date, notification, time, complete) VALUES ('{session['task']}', '{session['date']}', 0, '', 0)"
            )
            con.commit()
        user_sessions.pop(chat_id, None)
        bot.send_message(chat_id, '–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.')
        show_main_menu(chat_id)
    # –≤—ã–≤–æ–¥ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    elif callback.data == 'write_all':
        today = date.today()
        tasks = con.execute(f'SELECT task, date, id, complete FROM user_{chat_id}').fetchall()
        tasks = [t for t in tasks if datetime.strptime(t[1], '%d.%m.%Y').date() >= today]
        tasks.sort(key=lambda task: datetime.strptime(task[1], '%d.%m.%Y'))
        keyboard = telebot.types.InlineKeyboardMarkup()
        for task in tasks:
            mark = '‚úÖ' if task[3] else '‚ùå'
            keyboard.add(telebot.types.InlineKeyboardButton(f"{mark} {task[0]}", callback_data=str(task[2])))
        bot.send_message(chat_id, '–í–∞—à–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏:', reply_markup=keyboard)
    # –≤—ã–≤–æ–¥ "–∫–æ—Ä–∑–∏–Ω—ã"
    elif callback.data == 'trash':
        today = date.today()
        tasks = con.execute(f'SELECT task, date FROM user_{chat_id}').fetchall()
        old = [t for t in tasks if datetime.strptime(t[1], '%d.%m.%Y').date() < today]
        if old:
            text = "\n".join([f"- {t[0]} ({t[1]})" for t in old])
        else:
            text = '–£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–¥–∞—á –Ω–µ—Ç.'
        bot.send_message(chat_id, f'–ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–¥–∞—á:\n{text}')
    # –≤—ã–≤–æ–¥ "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é" –¥–ª—è –∑–∞–¥–∞—á–∏
    elif callback.data.isdigit():
        task = con.execute(f"SELECT task, date, time, notification FROM user_{chat_id} WHERE id = {int(callback.data)}").fetchone()
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton('–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é', callback_data=f'done_{callback.data}'))
        keyboard.add(telebot.types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data=f'del_one_{callback.data}'))
        keyboard.add(telebot.types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏', callback_data=f'change_txt_{callback.data}'))
        keyboard.add(telebot.types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∑–∞–¥–∞—á–∏', callback_data=f'change_date_{callback.data}'))
        keyboard.add(telebot.types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data=f'change_time_{callback.data}'))
        task_text = f"üóí –ó–∞–¥–∞—á–∞: {task[0]}\nüìÖ –î–∞—Ç–∞: {task[1]}"
        if task[3] and task[2]:
            task_text += f"\n‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task[2]}"
        bot.send_message(chat_id, task_text, reply_markup=keyboard)
    # –∏–∑–º–µ–Ω–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    elif callback.data.startswith('done_'):
        task_id = callback.data.split('_')[-1]
        con.execute(f"UPDATE user_{chat_id} SET complete = 1 WHERE id = {task_id}")
        con.commit()
        bot.send_message(chat_id, '–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.')
        show_main_menu(chat_id)
    # —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    elif callback.data.startswith('del_one'):
        task_id = callback.data.split('_')[-1]
        con.execute(f"DELETE FROM user_{chat_id} WHERE id = {task_id}")
        con.commit()
        bot.send_message(chat_id, '–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.')
        show_main_menu(chat_id)
    # –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
    elif callback.data.startswith('change_txt'):
        task_id = callback.data.split('_')[-1]
        user_sessions[chat_id] = {'edit_id': task_id, 'action': 'text'}
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:')
        bot.register_next_step_handler(callback.message, edit_task)
    # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏
    elif callback.data.startswith('change_date'):
        task_id = callback.data.split('_')[-1]
        user_sessions[chat_id] = {'edit_id': task_id, 'action': 'date'}
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:')
        bot.register_next_step_handler(callback.message, edit_task)
    # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    elif callback.data.startswith('change_time'):
        task_id = callback.data.split('_')[-1]
        user_sessions[chat_id] = {'edit_id': task_id, 'action': 'time'}
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú')
        bot.register_next_step_handler(callback.message, edit_task)
    # –≤—ã–≤–æ–¥ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    elif callback.data == 'today_task':
        today_str = date.today().strftime('%d.%m.%Y')
        tasks = con.execute(f"SELECT task, id FROM user_{chat_id} WHERE date = '{today_str}'").fetchall()
        keyboard = telebot.types.InlineKeyboardMarkup()
        for task in tasks:
            keyboard.add(telebot.types.InlineKeyboardButton(task[0], callback_data=str(task[1])))
        bot.send_message(chat_id, '–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:', reply_markup=keyboard)

    con.close()
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
def save_task(message):
    user_sessions[message.chat.id] = {'task': message.text}
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')
    bot.register_next_step_handler(message, save_date)
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã
def save_date(message):
    try:
        datetime.strptime(message.text, '%d.%m.%Y')
        user_sessions[message.chat.id]['date'] = message.text
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(
            telebot.types.InlineKeyboardButton('–î–∞', callback_data='answer_1'),
            telebot.types.InlineKeyboardButton('–ù–µ—Ç', callback_data='answer_2')
        )
        bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?', reply_markup=keyboard)
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: –î–î.–ú–ú.–ì–ì–ì–ì')
        bot.register_next_step_handler(message, save_date)
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def save_time(message):
    try:
        datetime.strptime(message.text, '%H:%M')
        session = user_sessions[message.chat.id]
        con = sqlite3.connect('todo_reminders.db')
        con.execute(
            f"INSERT INTO user_{message.chat.id} (task, date, notification, time, complete) VALUES ('{session['task']}', '{session['date']}', 1, '{message.text}', 0)"
        )
        con.commit()
        con.close()
        bot.send_message(message.chat.id, '–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º.')
        user_sessions.pop(message.chat.id, None)
        show_main_menu(message.chat.id)
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: –ß–ß:–ú–ú')
        bot.register_next_step_handler(message, save_time)
# –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
def edit_task(message):
    session = user_sessions.get(message.chat.id)
    if not session:
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return

    con = sqlite3.connect('todo_reminders.db')
    try:
        if session['action'] == 'text':
            con.execute(f"UPDATE user_{message.chat.id} SET task = '{message.text}' WHERE id = {session['edit_id']}")
        elif session['action'] == 'date':
            datetime.strptime(message.text, '%d.%m.%Y')
            con.execute(f"UPDATE user_{message.chat.id} SET date = '{message.text}' WHERE id = {session['edit_id']}")
        elif session['action'] == 'time':
            datetime.strptime(message.text, '%H:%M')
            con.execute(f"UPDATE user_{message.chat.id} SET time = '{message.text}', notification = 1 WHERE id = {session['edit_id']}")
        con.commit()
        bot.send_message(message.chat.id, '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.')
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        bot.register_next_step_handler(message, edit_task)
        return
    finally:
        con.close()
        user_sessions.pop(message.chat.id, None)
        show_main_menu(message.chat.id)
# –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è  
def check_reminders():
    con = sqlite3.connect('todo_reminders.db')
    now = datetime.now()
    today_str = now.strftime('%d.%m.%Y')
    time_str = now.strftime('%H:%M')
    for row in con.execute("SELECT name FROM sqlite_master WHERE type='table'").fetchall():
        table = row[0]
        if not table.startswith('user_'):
            continue
        tasks = con.execute(f"SELECT id, task FROM {table} WHERE date = '{today_str}' AND time = 'time_str' AND notification = 1 AND complete = 0").fetchall()
        user_id = table.replace('user_', '')
        for task in tasks:
            bot.send_message(user_id, f'‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task[1]}')
    con.close()

scheduler.add_job(check_reminders, 'interval', seconds=30)

print('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.')
bot.polling(non_stop=True)